<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="226" passed="226">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="773" started-at="2016-12-08T07:57:38Z" finished-at="2016-12-08T07:57:39Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="773" started-at="2016-12-08T07:57:38Z" finished-at="2016-12-08T07:57:39Z">
      <class name="storm.starter.tools.SlidingWindowCounterTest">
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="illegalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -10)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:79)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested 0)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:79)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -1)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:79)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -2)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:79)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="illegalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested 1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested 1)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:79)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -3)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:79)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="newInstanceShouldHaveEmptyCounts()[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="newInstanceShouldHaveEmptyCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newInstanceShouldHaveEmptyCounts -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedCounterIterations" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@73e22a3d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@47faa49c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedCounterIterations" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@7133da86]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@3232a28a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedCounterIterations" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@6da21078]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@7fee8714]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedCounterIterations" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@28f2a10f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@f736069]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="testCounterWithSimulatedRuns" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="simulatedCounterIterations" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@4229bb3f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@56cdfb3b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@59a6e353]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalWindowLengths" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
      </class> <!-- storm.starter.tools.SlidingWindowCounterTest -->
      <class name="storm.starter.bolt.RollingCountBoltTest">
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4411d970]" name="shouldDeclareOutputFields" duration-ms="3" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4411d970]" name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" duration-ms="46" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4411d970]" name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" duration-ms="2" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4411d970]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.starter.bolt.RollingCountBoltTest -->
      <class name="storm.starter.tools.SlotBasedCounterTest">
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="illegalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -10)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:42)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -3)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:42)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -2)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:42)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="illegalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -1)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:42)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="illegalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested 0)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:42)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="positiveNumSlotsShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="newInstanceShouldHaveEmptyCounts()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="newInstanceShouldHaveEmptyCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newInstanceShouldHaveEmptyCounts -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="positiveNumSlotsShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="positiveNumSlotsShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="shouldIncrementCountOnlyOneSlotAtATime()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="shouldIncrementCountOnlyOneSlotAtATime" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIncrementCountOnlyOneSlotAtATime -->
        <test-method status="PASS" signature="shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted" duration-ms="1" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="positiveNumSlotsShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="legalNumSlotsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="shouldIncrementCount([Ljava.lang.Object;, [I)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="shouldIncrementCount" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="incrementCountData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@14555e0a]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@4bb33f74]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIncrementCount -->
        <test-method status="PASS" signature="wipeSlotShouldSetAllCountsInSlotToZero()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="wipeSlotShouldSetAllCountsInSlotToZero" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeSlotShouldSetAllCountsInSlotToZero -->
        <test-method status="PASS" signature="shouldReturnZeroForNonexistentObject()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="shouldReturnZeroForNonexistentObject" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnZeroForNonexistentObject -->
        <test-method status="PASS" signature="wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@7a0ac6e3]" name="wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount -->
      </class> <!-- storm.starter.tools.SlotBasedCounterTest -->
      <class name="storm.starter.tools.NthLastModifiedTimeTrackerTest">
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="illegalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -10)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:39)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -2)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:39)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested 0)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:39)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -3)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:39)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -1)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:39)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalNumTimesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="7" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@759d26fb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@3c73951]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@3d5c822d]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@6f46426d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@3e84448c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@4a7f959b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@10d307f1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@4d5b6aac]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@73700b80]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@49c7b90e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@1b1426f4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@32b260fa]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@429bffaa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@5403f35f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@581ac8a8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@6d4e5011]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@483f6d77]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@7e5afaa6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@63a12c68]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@28f3b248]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@2a54a73f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@16a0ee18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@57d7f8ca]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@76c3e77a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@78123e82]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@67c33749]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@fba92d3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@662b4c69]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@fa49800]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@71238fc2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@5fbdfdcf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@4efc180e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@3d6f0054]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@505fc5a4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@bd4dc25]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@25084a1e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@16610890]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@71def8f8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@156b88f5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@3bf9ce3e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@383bfa16]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@4d465b11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@36d64342]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="simulatedTrackerIterations" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@53fdffa1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@5562c41e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
      </class> <!-- storm.starter.tools.NthLastModifiedTimeTrackerTest -->
      <class name="storm.starter.tools.RankableObjectWithFieldsTest">
        <test-method status="PASS" signature="constructorWithNullObjectAndFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="constructorWithNullObjectAndFieldsShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The object must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The object must not be null
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:43)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNullObjectAndFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNullObjectAndFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeCountAndFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="constructorWithNegativeCountAndFieldsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The count must be >= 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The count must be >= 0
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:46)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNegativeCountAndFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeCountAndFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeCountAndNoFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="constructorWithNegativeCountAndNoFieldsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The count must be >= 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The count must be >= 0
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:46)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNegativeCountAndNoFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeCountAndNoFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNullObjectAndNoFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="constructorWithNullObjectAndNoFieldsShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The object must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The object must not be null
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:43)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNullObjectAndNoFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNullObjectAndNoFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="copyShouldReturnCopy(storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="copyShouldReturnCopy" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="copyData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="copyShouldReturnCopy(storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|3|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="shouldBeEqualToItself()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldBeEqualToItself" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToItself -->
        <test-method status="PASS" signature="fieldsShouldBeImmutable()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="fieldsShouldBeImmutable" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <exception class="java.lang.UnsupportedOperationException">
            <full-stacktrace>
              <![CDATA[java.lang.UnsupportedOperationException
	at com.google.common.collect.ImmutableList.remove(ImmutableList.java:479)
	at storm.starter.tools.RankableObjectWithFieldsTest.fieldsShouldBeImmutable(RankableObjectWithFieldsTest.java:208)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.UnsupportedOperationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fieldsShouldBeImmutable -->
        <test-method status="PASS" signature="copyShouldReturnCopy(storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0|someField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="shouldBeEqualToTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldBeEqualToTrueDuplicates" duration-ms="2" started-at="2016-12-08T01:57:38Z" data-provider="trueDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToTrueDuplicates -->
        <test-method status="PASS" signature="shouldBeEqualToTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldBeEqualToTrueDuplicates" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="trueDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToTrueDuplicates -->
        <test-method status="PASS" signature="shouldBeEqualToTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldBeEqualToTrueDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="trueDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0|someField]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToTrueDuplicates -->
        <test-method status="PASS" signature="shouldCreateRankableObjectFromTuple()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldCreateRankableObjectFromTuple" duration-ms="6" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateRankableObjectFromTuple -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[FOO|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveSameHashCodeAsTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveSameHashCodeAsTrueDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="trueDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0|someField]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveSameHashCodeAsTrueDuplicates -->
        <test-method status="PASS" signature="shouldHaveSameHashCodeAsTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveSameHashCodeAsTrueDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="trueDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveSameHashCodeAsTrueDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveSameHashCodeAsTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldHaveSameHashCodeAsTrueDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="trueDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveSameHashCodeAsTrueDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[FOO|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="falseDuplicatesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="otherClassesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[7, 8, 9]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="otherClassesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="otherClassesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldReturnTheCount()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldReturnTheCount" duration-ms="1" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheCount -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="otherClassesData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[java.lang.Object@8317c52]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldReturnTheFields(java.lang.Object, long, [Ljava.lang.Object;)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldReturnTheFields" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="fieldsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[java.lang.Object@5f683daf]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[271]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[Ljava.lang.Object;@32ee6fee]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheFields -->
        <test-method status="PASS" signature="shouldReturnTheObject()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldReturnTheObject" duration-ms="1" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheObject -->
        <test-method status="PASS" signature="shouldReturnTheFields(java.lang.Object, long, [Ljava.lang.Object;)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="shouldReturnTheFields" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="fieldsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[quux]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d0f2471]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheFields -->
        <test-method status="PASS" signature="toStringShouldContainStringRepresentationsOfObjectAndCount(java.lang.Object, long)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="toStringShouldContainStringRepresentationsOfObjectAndCount" duration-ms="4" started-at="2016-12-08T01:57:38Z" data-provider="toStringData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- toStringShouldContainStringRepresentationsOfObjectAndCount -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1000]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="toStringShouldContainStringRepresentationsOfObjectAndCount(java.lang.Object, long)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="toStringShouldContainStringRepresentationsOfObjectAndCount" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="toStringData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[BAR]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- toStringShouldContainStringRepresentationsOfObjectAndCount -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1000]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1000]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1000]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@3d24753a]" name="verifyCompareTo" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="compareToData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
      </class> <!-- storm.starter.tools.RankableObjectWithFieldsTest -->
      <class name="storm.starter.tools.RankingsTest">
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:41)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:41)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:41)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:41)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopNData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="copyConstructorShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3], [D|4]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[D|4]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnDefensiveCopy" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3], [D|4]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[E|5], [F|6]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[ZERO_COUNT|0]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="copyConstructorShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyConstructorShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[ZERO_COUNT|0]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyConstructorShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="copyShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3], [D|4]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="copyShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="copyShouldReturnCopy(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="copyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnCopy -->
        <test-method status="PASS" signature="copyShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3], [D|4]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[E|5], [F|6]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[D|4]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnDefensiveCopy" duration-ms="6" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[ZERO_COUNT|0]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="copyShouldReturnDefensiveCopy(int, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="copyShouldReturnDefensiveCopy" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="defensiveCopyRankingsData" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[ZERO_COUNT|0]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- copyShouldReturnDefensiveCopy -->
        <test-method status="PASS" signature="defaultConstructorShouldSetPositiveTopN()[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="defaultConstructorShouldSetPositiveTopN" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- defaultConstructorShouldSetPositiveTopN -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [D|4], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1], [C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3], [D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[B|2], [D|4]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [D|4], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3], [D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1], [C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [D|4], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3], [D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="simulatedRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1], [C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldNotRankDuplicateObjectsMoreThanOnce(java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldNotRankDuplicateObjectsMoreThanOnce" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="duplicatesData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1], [A|2], [A|3]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotRankDuplicateObjectsMoreThanOnce -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1], [ZERO_COUNT|0]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="shouldHaveDefaultConstructor()[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldHaveDefaultConstructor" duration-ms="0" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDefaultConstructor -->
        <test-method status="PASS" signature="shouldNotRankDuplicateObjectsMoreThanOnce(java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldNotRankDuplicateObjectsMoreThanOnce" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="duplicatesData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[someObject|42], [someObject|42], [someObject|42]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotRankDuplicateObjectsMoreThanOnce -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[ZERO_COUNT|0], [A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[ZERO_COUNT|0]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[ZERO_COUNT|0], [ZERO2|0]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [ZERO_COUNT|0], [ZERO2|0], [D|4], [ZERO3|0], [ZERO4|0], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="sizeOfRankingsShouldNotGrowBeyondTopN(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="sizeOfRankingsShouldNotGrowBeyondTopN" duration-ms="1" started-at="2016-12-08T01:57:39Z" data-provider="rankingsGrowData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sizeOfRankingsShouldNotGrowBeyondTopN -->
        <test-method status="PASS" signature="shouldRemoveZeroCounts(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="shouldRemoveZeroCounts" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="removeZeroRankingsData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1], [ZERO_COUNT|0], [B|2]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveZeroCounts -->
        <test-method status="PASS" signature="sizeOfRankingsShouldNotGrowBeyondTopN(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="sizeOfRankingsShouldNotGrowBeyondTopN" duration-ms="0" started-at="2016-12-08T01:57:39Z" data-provider="rankingsGrowData" finished-at="2016-12-08T01:57:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3], [D|4]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sizeOfRankingsShouldNotGrowBeyondTopN -->
        <test-method status="PASS" signature="updatingWithNewRankablesShouldBeThreadSafe()[pri:0, instance:storm.starter.tools.RankingsTest@71be98f5]" name="updatingWithNewRankablesShouldBeThreadSafe" duration-ms="22" started-at="2016-12-08T01:57:39Z" finished-at="2016-12-08T01:57:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updatingWithNewRankablesShouldBeThreadSafe -->
      </class> <!-- storm.starter.tools.RankingsTest -->
      <class name="storm.starter.bolt.IntermediateRankingsBoltTest">
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="380" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -10 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -10 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:45)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested 0 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested 0 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:45)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -3 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -3 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:45)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -1 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -1 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:45)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -2 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -2 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:45)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -10)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -1)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -2)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -3)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested 0)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveEmitFrequencyShouldBeOk" duration-ms="4" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveTopNShouldBeOk" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="shouldDeclareOutputFields" duration-ms="141" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitNothingIfNormalTupleIsReceived()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="shouldEmitNothingIfNormalTupleIsReceived" duration-ms="25" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNormalTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="shouldEmitSomethingIfTickTupleIsReceived" duration-ms="7" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@60f82f98]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="13" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.starter.bolt.IntermediateRankingsBoltTest -->
      <class name="storm.starter.bolt.TotalRankingsBoltTest">
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -10 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -10 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:44)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -3 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -3 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:44)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -2 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -2 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:44)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested 0 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested 0 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:44)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -1 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -1 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:64)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:44)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -3)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:40)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -10)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:40)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -2)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:40)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested 0)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:40)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveEmitFrequencyShouldBeOk" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="illegalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -1)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:61)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:56)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:40)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:115)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:205)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:108)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveTopNShouldBeOk" duration-ms="1" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalEmitFrequency" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2016-12-08T01:57:38Z" data-provider="legalTopN" finished-at="2016-12-08T01:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitNothingIfNormalTupleIsReceived()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="shouldEmitNothingIfNormalTupleIsReceived" duration-ms="6" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNormalTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="shouldEmitSomethingIfTickTupleIsReceived" duration-ms="1" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@6442b0a6]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="1" started-at="2016-12-08T01:57:38Z" finished-at="2016-12-08T01:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.starter.bolt.TotalRankingsBoltTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
